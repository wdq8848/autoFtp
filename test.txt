def upload(ip, port, username, password, local, remote):  
    #上传目录 or 文件
    paramiko.util.log_to_file("paramiko.log")  
    trans = paramiko.Transport((ip, int(port)))  
    trans.connect(username=username, password=password)  
    sftp = paramiko.SFTPClient.from_transport(trans)   
    try:  
        sftp.mkdir(remote)  
    except Exception, e:  
        print e,'mkdir',remote , 'fail, dir is exists'
    try:
        if os.path.isdir(local):#判断本地参数是目录还是文件
            print 'upload dir'
            for root, dirs, files in os.walk(local):  #遍历本地目录
                for file_name in files:  
                    local_file_path = os.path.join(root, file_name)
                    # 切片：windows路径去掉盘符  
                    if(platform.system() == 'Windows'):
                        remote_file_path = os.path.join(  
                        remote_dir, local_file_path[3:])      
                    else:
                        remote_file_path = os.path.join(  
                        remote_dir, local_file_path)    
                    remote_file_path = remote_file_path.replace("\\", "/")  

                    try:  
                        sftp.put(local_file_path, remote_file_path)  
                    except Exception, e:  
                        print e,'put',local_file_path,'to'
                            ,remote_file_path,'fail'
                        sftp.mkdir(os.path.dirname(remote_file_path))  
                        sftp.put(local_file_path, remote_file_path)  
                for dir_name in dirs:  
                    local_dir = os.path.join(root, dir_name)
                    # 切片：windows路径去掉盘符
                    if(platform.system() == 'Windows'):
                        remote_path = os.path.join(remote, local_dir[3:])  
                    else:
                        remote_path = os.path.join(remote, local_dir) 
                    remote_path = remote_path.replace("\\", "/")  

                    try:  
                        sftp.mkdir(os.path.dirname(remote_path))  
                        sftp.mkdir(remote_path)  
                    except Exception, e:  
                        print e,'mkdir',remote_path,'on remote fail'  
        else:
            print 'upload file'
            try:
                remote_dir,remote_filename  =  os.path.split(remote)
                local_dir,local_filename = os.path.split(local)
                # remote中没有目标文件名,使用local_filename
                if remote_filename == ''  or remote_filename == '.': 
                    remote_filename = local_filename
                # remote 中没有目标目录,使用默认目录
                if remote_dir == '': 
                    remote_dir = '.'
                try:
                    sftp.chdir(remote_dir) # 切换到目标目录
                    sftp.put(local,remote_filename) 
                except Exception, e:  
                    print e,remote_dir,'is not exists'      
            except Exception, e:  
                print e,'put',local,'to',remote,'fail'  
        trans.close()
    except Exception, e:  
        print e   
        trans.close()
文件、目录下载
def download(host,port,username,password,remote,local):
    # 下载文件 or 目录
    paramiko.util.log_to_file("paramiko.log")  
    sf = paramiko.Transport((host,port))
    sf.connect(username = username,password = password)
    sftp = paramiko.SFTPClient.from_transport(sf)
    print local,remote   
    def getall(remote,local):
        print 'prarms',remote,local
        if stat.S_ISREG(sftp.stat(remote).st_mode):
            print remote,'is file,get to',os.path.join(local,remote)
            sftp.get(remote,os.path.join(local,remote))
            return
        else:
            print remote,'is dir,mkdir at',os.path.join(local,remote)
            os.mkdir(os.path.join(local,remote))
            for f in sftp.listdir_attr(remote):
                getall(os.path.join(remote,f.filename),local) 

    try:
        #1.local is file or dir, remote is file
        if stat.S_ISREG(sftp.stat(remote).st_mode): # remote is file
            local_dir,local_filename = os.path.split(local) 
            print local_dir,local_filename 
            remote_dir,remote_filename = os.path.split(remote)
            print remote_dir,remote_filename
            # 如果没有输入文件名使用remote的文件名 
            if local_filename == '' and local_filename != '.': 
                print 'without a filename'          
                sftp.get(remote,os.path.join(local,remote_filename))
            else:
                print 'have a filename'
                sftp.get(remote,local)
        else: #remote is dir
            getall(remote,local)        
        trans.close()
    except Exception, e:
        print e
        trans.close()